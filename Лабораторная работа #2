АНАЛИЗ ДАННЫХ И ИСКУССТВЕННЫЙ ИНТЕЛЛЕКТ [in GameDev]
Отчет по лабораторной работе #1 выполнил(а):

Масленников Павел Алексеевич Отметка о выполнении заданий (заполняется студентом):
Задание	Выполнение	Баллы
Задание 1	*	60
Задание 2	*	20
Задание 3	#	20
знак "*" - задание выполнено; знак "#" - задание не выполнено;

Работу проверили:

к.т.н., доцент Денисов Д.В.
к.э.н., доцент Панов М.А.
ст. преп., Фадеев В.О.
N|Solid

Build Status

Структура отчета

Данные о работе: название работы, фио, группа, выполненные задания.
Цель работы.
Задание 1.
Код реализации выполнения задания. Визуализация результатов выполнения (если применимо).
Задание 2.
Код реализации выполнения задания. Визуализация результатов выполнения (если применимо).
Задание 3.
Код реализации выполнения задания. Визуализация результатов выполнения (если применимо).
Выводы.
✨Magic ✨
Цель работы
Ознакомиться с основными функциями Unity и взаимодействием с объектами внутри редактора.

Задание 1
Пошагово выполнить каждый пункт с описанием и примера реализации задач по теме видео самостоятельной работы.
Ход работы:

Создать новый проект из шаблона 3D – Core;
Проверить, что настроена интеграция редактора Unity и Visual Studio Code (пункты 8-10 введения);
Создать объект Plane;
Создать объект Cube;
Создать объект Sphere;
Установить компонент Sphere Collider для объекта Sphere;
Настроить Sphere Collider в роли триггера;
Объект куб перекрасить в красный цвет;
Добавить кубу симуляцию физики, при это куб не должен проваливаться под Plane;
Написать скрипт, который будет выводить в консоль сообщение о том, что объект Sphere столкнулся с объектом Cube;
При столкновении Cube должен менять свой цвет на зелёный, а при завершении столкновения обратно на красный.
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CheckCollider : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    private void OnTriggerEnter(Collider other) {
        Debug.Log("Произошло столкновение с " + other.gameObject.name);
        other.GetComponent<Renderer>().material.SetColor("_Color", Color.green);
    }

    private void OnTriggerExit(Collider other) {
        Debug.Log("Завершено столкновение с " + other.gameObject.name);
        other.GetComponent<Renderer>().material.SetColor("_Color", Color.red);
    }
}
1

Задание 2
Продемонстрируйте на сцене в Unity следующее:
Что произойдёт с координатами объекта, если он перестанет быть дочерним?
Создайте три различных примера работы компонента RigidBody?
Ход работы: При создании дочернего объекта он принимает координаты своего родителя. То есть, при его создании координаты будут иметь значения 0,0,0, относительно его родителя. При прерывания связи с родительским объектом, бывший дочерний объект принимает координаты относительно точки отсчета координат игрового мира.

Первичные координаты относительно родителя (координаты Cylinder): 2

Координаты в случае смены положения относительно родительского объекта: 3

Координаты при разрыве связи с родительским элементом: 4

Пример 1:

Создать два объекта Plane и выстроить наклонную поверхность
Создать объект Cube
Создать объект Sphere
Добавить компоненты Rigidbody для двух Cube и Sphere
Включить гравитацию для компонентов
Компоненты скатываются по наклонной плоскоти при запуске сцены
 BA6lHkQDHx.mp4 
Пример 2:

Создать объект Sphere и Plane
К объекту Sphere добавить компонент Rigidbody
Поднять объект Sphere над Plane
Установть значение 6 в строке Drag
Включить гравитацию для объекта Sphere
Строка Drag отвечает за замедление движения объекта в пространстве. Чем больше значение тем больше будет замедлен объект.
При изменении этого значения меняется скорость падения объекта Sphere на Plane
Пример 3:

Создать объект Sphere и Plane
К объекту Sphere и Plane добавить компонент Rigidbody
Поднять объект Sphere над Plane
Установить гравитаю для Sphere и кинематику для Plane
При прикосновении с объектов Sphere и Plane - Sphere будет уничтожаться
 eaawl0Sb6L.mp4 
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DestroyObject : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }


    private void OnCollisionEnter(Collision other) {
        if (other.gameObject.name == "Sphere"){
    Destroy(other.gameObject);
        
    }
}

}
Задание 3
Реализуйте на сцене генерацию n кубиков. Число n вводится пользователем после старта сцены.
Выводы
Познакомился с юнити, понял основные элементы интерфейса и свойства объектов.

Plugin	README
Dropbox	[plugins/dropbox/README.md][PlDb]
GitHub	[plugins/github/README.md][PlGh]
Google Drive	[plugins/googledrive/README.md][PlGd]
OneDrive	[plugins/onedrive/README.md][PlOd]
Medium	[plugins/medium/README.md][PlMe]
Google Analytics	[plugins/googleanalytics/README.md][PlGa]
Powered by
BigDigital Team: Denisov | Fadeev | Panov
